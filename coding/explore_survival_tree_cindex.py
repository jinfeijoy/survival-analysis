# -*- coding: utf-8 -*-
"""explore_survival_tree_cindex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_zvz1XsS4paho6XYTczfk4KGfZ0K31bl
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OrdinalEncoder
!pip install scikit-learn==0.24
!pip install delayed
!pip install scikit-survival
!pip install eli5
!pip install lifelines

from sksurv.datasets import load_gbsg2
from sksurv.preprocessing import OneHotEncoder
from sksurv.ensemble import RandomSurvivalForest
import sksurv
from google.colab import drive
drive.mount('/content/drive')
path = '/content/drive/MyDrive/colab_data'

data = pd.read_csv(os.path.join(path, "WA_Fn-UseC_-Telco-Customer-Churn.csv"))
data['Churn'] = data['Churn'].apply(lambda x: np.where(x=='Yes',1,0))
data['entry_age'] = 0
data = data[data.tenure>data.entry_age]
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'])
data[data.select_dtypes(['object']).columns] = data.select_dtypes(['object']).apply(lambda x: x.astype('category'))
data.head(3)

"""## Survival Tree (sksurv)"""

X, y = sksurv.datasets.get_x_y(data, ['Churn','tenure'], pos_label=1, survival=True)

# Reference: https://scikit-survival.readthedocs.io/en/stable/user_guide/random-survival-forest.html
feature_names = ['SeniorCitizen', 
                    'Partner', 
                    'Dependents', 
#                     'PhoneService', 'MultipleLines', 'InternetService', 
#                     'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 
#                     'TechSupport', 'StreamingTV', 'StreamingMovies', 
#                     'Contract', 'PaperlessBilling', 'PaymentMethod', 
                    'MonthlyCharges', 
                    'TotalCharges', 
                    'gender', 'entry_age']
Xt = X[feature_names]


Xt = OneHotEncoder().fit_transform(Xt)

random_state = 20

X_train, X_test, y_train, y_test = train_test_split(Xt, y, test_size=0.25, random_state=random_state)

rsf = RandomSurvivalForest(n_estimators=100,
                           min_samples_split=10,
                           min_samples_leaf=15,
                           max_features="sqrt",
                           n_jobs=-1,
                           random_state=random_state)
rsf.fit(X_train, y_train)

rsf.score(X_test, y_test) #concordance index

X_test_sel = X_test.head(3)
print(X_test_sel)
pd.Series(rsf.predict(X_test_sel))

surv = rsf.predict_survival_function(X_test_sel, return_array=True)

for i, s in enumerate(surv):
    plt.step(rsf.event_times_, s, where="post", label=str(i))
plt.ylabel("Survival probability")
plt.xlabel("Time in days")
plt.legend()
plt.grid(True)

surv = rsf.predict_cumulative_hazard_function(X_test_sel, return_array=True)

for i, s in enumerate(surv):
    plt.step(rsf.event_times_, s, where="post", label=str(i))
plt.ylabel("Cumulative hazard")
plt.xlabel("Time in days")
plt.legend()
plt.grid(True)

import eli5
from eli5.sklearn import PermutationImportance

perm = PermutationImportance(rsf, n_iter=15, random_state=random_state)
perm.fit(X_test, y_test)
eli5.show_weights(perm, feature_names=feature_names)

y_test

"""## C-index

Reference: https://medium.com/analytics-vidhya/concordance-index-72298c11eac7

Notice that lifelines gives the concordance between the actual event times and the predicted scores, while scikit-survival gives the concordance between the actuals and the predicted risks, so over the same lists, they are the complete opposite. Scikit-survival also gives the number of concordant pairs, number of discordant pairs, number of pairs having tied estimated risks, and the number of comparable pairs sharing the same time.

Concordance index (lifelines) = 1-Concordance index (scikit-survival)

Concordance index from **scikit-survival** -> 1 means **perfect results**.
"""

# Calculate C-Index 
from lifelines.utils import concordance_index
test_churn = [x[1] for x in y_test]
test_event_obs = [x[0] for x in y_test]
print(test_churn)
print(test_event_obs)
y_test_pred = rsf.predict(X_test)
print(y_test_pred)
concordance_index(test_churn, y_test_pred, test_event_obs) # to make this index has the same logic as real c-index, we need to write it as concordance_index(test_churn, -y_test_pred, test_event_obs)

from sksurv.metrics import concordance_index_censored as ci_scikit
ci_scikit(test_event_obs, test_churn, y_test_pred)[0]